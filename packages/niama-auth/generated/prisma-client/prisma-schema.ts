// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateUser {
  count: Int!
}

type AggregateUserProfile {
  count: Int!
}

enum AuthStatus {
  BLOCKED
  INCORRECT
  OK
  PENDING
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserProfile(data: UserProfileCreateInput!): UserProfile!
  updateUserProfile(data: UserProfileUpdateInput!, where: UserProfileWhereUniqueInput!): UserProfile
  updateManyUserProfiles(data: UserProfileUpdateManyMutationInput!, where: UserProfileWhereInput): BatchPayload!
  upsertUserProfile(where: UserProfileWhereUniqueInput!, create: UserProfileCreateInput!, update: UserProfileUpdateInput!): UserProfile!
  deleteUserProfile(where: UserProfileWhereUniqueInput!): UserProfile
  deleteManyUserProfiles(where: UserProfileWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userProfile(where: UserProfileWhereUniqueInput!): UserProfile
  userProfiles(where: UserProfileWhereInput, orderBy: UserProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserProfile]!
  userProfilesConnection(where: UserProfileWhereInput, orderBy: UserProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserProfileConnection!
  node(id: ID!): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userProfile(where: UserProfileSubscriptionWhereInput): UserProfileSubscriptionPayload
}

type User {
  createdAt: DateTime!
  id: ID!
  password: String!
  profile: UserProfile!
  roles: [String!]!
  status: AuthStatus!
  updatedAt: DateTime!
  username: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  password: String!
  profile: UserProfileCreateOneInput!
  roles: UserCreaterolesInput
  status: AuthStatus
  username: String!
}

input UserCreaterolesInput {
  set: [String!]
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  password_ASC
  password_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
}

type UserPreviousValues {
  createdAt: DateTime!
  id: ID!
  password: String!
  roles: [String!]!
  status: AuthStatus!
  updatedAt: DateTime!
  username: String!
}

type UserProfile {
  city: String
  country: String
  department: String
  email: String
  firstNames: [String!]!
  id: ID!
  lastName: String!
  phone: String
  phoneAlt: String
  street: String
  streetExtra: String
  zipcode: String
}

type UserProfileConnection {
  pageInfo: PageInfo!
  edges: [UserProfileEdge]!
  aggregate: AggregateUserProfile!
}

input UserProfileCreatefirstNamesInput {
  set: [String!]
}

input UserProfileCreateInput {
  city: String
  country: String
  department: String
  email: String
  firstNames: UserProfileCreatefirstNamesInput
  id: ID
  lastName: String!
  phone: String
  phoneAlt: String
  street: String
  streetExtra: String
  zipcode: String
}

input UserProfileCreateOneInput {
  create: UserProfileCreateInput
  connect: UserProfileWhereUniqueInput
}

type UserProfileEdge {
  node: UserProfile!
  cursor: String!
}

enum UserProfileOrderByInput {
  city_ASC
  city_DESC
  country_ASC
  country_DESC
  department_ASC
  department_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  lastName_ASC
  lastName_DESC
  phone_ASC
  phone_DESC
  phoneAlt_ASC
  phoneAlt_DESC
  street_ASC
  street_DESC
  streetExtra_ASC
  streetExtra_DESC
  zipcode_ASC
  zipcode_DESC
}

type UserProfilePreviousValues {
  city: String
  country: String
  department: String
  email: String
  firstNames: [String!]!
  id: ID!
  lastName: String!
  phone: String
  phoneAlt: String
  street: String
  streetExtra: String
  zipcode: String
}

type UserProfileSubscriptionPayload {
  mutation: MutationType!
  node: UserProfile
  updatedFields: [String!]
  previousValues: UserProfilePreviousValues
}

input UserProfileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserProfileWhereInput
  AND: [UserProfileSubscriptionWhereInput!]
  OR: [UserProfileSubscriptionWhereInput!]
  NOT: [UserProfileSubscriptionWhereInput!]
}

input UserProfileUpdateDataInput {
  city: String
  country: String
  department: String
  email: String
  firstNames: UserProfileUpdatefirstNamesInput
  lastName: String
  phone: String
  phoneAlt: String
  street: String
  streetExtra: String
  zipcode: String
}

input UserProfileUpdatefirstNamesInput {
  set: [String!]
}

input UserProfileUpdateInput {
  city: String
  country: String
  department: String
  email: String
  firstNames: UserProfileUpdatefirstNamesInput
  lastName: String
  phone: String
  phoneAlt: String
  street: String
  streetExtra: String
  zipcode: String
}

input UserProfileUpdateManyMutationInput {
  city: String
  country: String
  department: String
  email: String
  firstNames: UserProfileUpdatefirstNamesInput
  lastName: String
  phone: String
  phoneAlt: String
  street: String
  streetExtra: String
  zipcode: String
}

input UserProfileUpdateOneRequiredInput {
  create: UserProfileCreateInput
  update: UserProfileUpdateDataInput
  upsert: UserProfileUpsertNestedInput
  connect: UserProfileWhereUniqueInput
}

input UserProfileUpsertNestedInput {
  update: UserProfileUpdateDataInput!
  create: UserProfileCreateInput!
}

input UserProfileWhereInput {
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  department: String
  department_not: String
  department_in: [String!]
  department_not_in: [String!]
  department_lt: String
  department_lte: String
  department_gt: String
  department_gte: String
  department_contains: String
  department_not_contains: String
  department_starts_with: String
  department_not_starts_with: String
  department_ends_with: String
  department_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  phoneAlt: String
  phoneAlt_not: String
  phoneAlt_in: [String!]
  phoneAlt_not_in: [String!]
  phoneAlt_lt: String
  phoneAlt_lte: String
  phoneAlt_gt: String
  phoneAlt_gte: String
  phoneAlt_contains: String
  phoneAlt_not_contains: String
  phoneAlt_starts_with: String
  phoneAlt_not_starts_with: String
  phoneAlt_ends_with: String
  phoneAlt_not_ends_with: String
  street: String
  street_not: String
  street_in: [String!]
  street_not_in: [String!]
  street_lt: String
  street_lte: String
  street_gt: String
  street_gte: String
  street_contains: String
  street_not_contains: String
  street_starts_with: String
  street_not_starts_with: String
  street_ends_with: String
  street_not_ends_with: String
  streetExtra: String
  streetExtra_not: String
  streetExtra_in: [String!]
  streetExtra_not_in: [String!]
  streetExtra_lt: String
  streetExtra_lte: String
  streetExtra_gt: String
  streetExtra_gte: String
  streetExtra_contains: String
  streetExtra_not_contains: String
  streetExtra_starts_with: String
  streetExtra_not_starts_with: String
  streetExtra_ends_with: String
  streetExtra_not_ends_with: String
  zipcode: String
  zipcode_not: String
  zipcode_in: [String!]
  zipcode_not_in: [String!]
  zipcode_lt: String
  zipcode_lte: String
  zipcode_gt: String
  zipcode_gte: String
  zipcode_contains: String
  zipcode_not_contains: String
  zipcode_starts_with: String
  zipcode_not_starts_with: String
  zipcode_ends_with: String
  zipcode_not_ends_with: String
  AND: [UserProfileWhereInput!]
  OR: [UserProfileWhereInput!]
  NOT: [UserProfileWhereInput!]
}

input UserProfileWhereUniqueInput {
  id: ID
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  password: String
  profile: UserProfileUpdateOneRequiredInput
  roles: UserUpdaterolesInput
  status: AuthStatus
  username: String
}

input UserUpdateManyMutationInput {
  password: String
  roles: UserUpdaterolesInput
  status: AuthStatus
  username: String
}

input UserUpdaterolesInput {
  set: [String!]
}

input UserWhereInput {
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  profile: UserProfileWhereInput
  status: AuthStatus
  status_not: AuthStatus
  status_in: [AuthStatus!]
  status_not_in: [AuthStatus!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
`