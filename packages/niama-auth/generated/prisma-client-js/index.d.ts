// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  user: (where?: UserWhereInput) => Promise<boolean>;
  userProfile: (where?: UserProfileWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userProfile: (
    where: UserProfileWhereUniqueInput
  ) => UserProfileNullablePromise;
  userProfiles: (args?: {
    where?: UserProfileWhereInput;
    orderBy?: UserProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserProfile>;
  userProfilesConnection: (args?: {
    where?: UserProfileWhereInput;
    orderBy?: UserProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserProfileConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserProfile: (data: UserProfileCreateInput) => UserProfilePromise;
  updateUserProfile: (args: {
    data: UserProfileUpdateInput;
    where: UserProfileWhereUniqueInput;
  }) => UserProfilePromise;
  updateManyUserProfiles: (args: {
    data: UserProfileUpdateManyMutationInput;
    where?: UserProfileWhereInput;
  }) => BatchPayloadPromise;
  upsertUserProfile: (args: {
    where: UserProfileWhereUniqueInput;
    create: UserProfileCreateInput;
    update: UserProfileUpdateInput;
  }) => UserProfilePromise;
  deleteUserProfile: (where: UserProfileWhereUniqueInput) => UserProfilePromise;
  deleteManyUserProfiles: (
    where?: UserProfileWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userProfile: (
    where?: UserProfileSubscriptionWhereInput
  ) => UserProfileSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AuthStatus = "BLOCKED" | "INCORRECT" | "OK" | "PENDING";

export type UserOrderByInput =
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "id_ASC"
  | "id_DESC"
  | "password_ASC"
  | "password_DESC"
  | "status_ASC"
  | "status_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "username_ASC"
  | "username_DESC";

export type UserProfileOrderByInput =
  | "city_ASC"
  | "city_DESC"
  | "country_ASC"
  | "country_DESC"
  | "department_ASC"
  | "department_DESC"
  | "email_ASC"
  | "email_DESC"
  | "id_ASC"
  | "id_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "phoneAlt_ASC"
  | "phoneAlt_DESC"
  | "street_ASC"
  | "street_DESC"
  | "streetExtra_ASC"
  | "streetExtra_DESC"
  | "zipcode_ASC"
  | "zipcode_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  password: String;
  profile: UserProfileCreateOneInput;
  roles?: Maybe<UserCreaterolesInput>;
  status?: Maybe<AuthStatus>;
  username: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
}>;

export type UserProfileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  profile?: Maybe<UserProfileWhereInput>;
  status?: Maybe<AuthStatus>;
  status_not?: Maybe<AuthStatus>;
  status_in?: Maybe<AuthStatus[] | AuthStatus>;
  status_not_in?: Maybe<AuthStatus[] | AuthStatus>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserProfileUpdatefirstNamesInput {
  set?: Maybe<String[] | String>;
}

export interface UserProfileCreatefirstNamesInput {
  set?: Maybe<String[] | String>;
}

export interface UserProfileUpdateDataInput {
  city?: Maybe<String>;
  country?: Maybe<String>;
  department?: Maybe<String>;
  email?: Maybe<String>;
  firstNames?: Maybe<UserProfileUpdatefirstNamesInput>;
  lastName?: Maybe<String>;
  phone?: Maybe<String>;
  phoneAlt?: Maybe<String>;
  street?: Maybe<String>;
  streetExtra?: Maybe<String>;
  zipcode?: Maybe<String>;
}

export interface UserProfileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserProfileWhereInput>;
  AND?: Maybe<
    UserProfileSubscriptionWhereInput[] | UserProfileSubscriptionWhereInput
  >;
  OR?: Maybe<
    UserProfileSubscriptionWhereInput[] | UserProfileSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UserProfileSubscriptionWhereInput[] | UserProfileSubscriptionWhereInput
  >;
}

export interface UserProfileUpdateOneRequiredInput {
  create?: Maybe<UserProfileCreateInput>;
  update?: Maybe<UserProfileUpdateDataInput>;
  upsert?: Maybe<UserProfileUpsertNestedInput>;
  connect?: Maybe<UserProfileWhereUniqueInput>;
}

export interface UserProfileUpdateManyMutationInput {
  city?: Maybe<String>;
  country?: Maybe<String>;
  department?: Maybe<String>;
  email?: Maybe<String>;
  firstNames?: Maybe<UserProfileUpdatefirstNamesInput>;
  lastName?: Maybe<String>;
  phone?: Maybe<String>;
  phoneAlt?: Maybe<String>;
  street?: Maybe<String>;
  streetExtra?: Maybe<String>;
  zipcode?: Maybe<String>;
}

export interface UserUpdateInput {
  password?: Maybe<String>;
  profile?: Maybe<UserProfileUpdateOneRequiredInput>;
  roles?: Maybe<UserUpdaterolesInput>;
  status?: Maybe<AuthStatus>;
  username?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  password?: Maybe<String>;
  roles?: Maybe<UserUpdaterolesInput>;
  status?: Maybe<AuthStatus>;
  username?: Maybe<String>;
}

export interface UserProfileUpsertNestedInput {
  update: UserProfileUpdateDataInput;
  create: UserProfileCreateInput;
}

export interface UserProfileCreateInput {
  city?: Maybe<String>;
  country?: Maybe<String>;
  department?: Maybe<String>;
  email?: Maybe<String>;
  firstNames?: Maybe<UserProfileCreatefirstNamesInput>;
  id?: Maybe<ID_Input>;
  lastName: String;
  phone?: Maybe<String>;
  phoneAlt?: Maybe<String>;
  street?: Maybe<String>;
  streetExtra?: Maybe<String>;
  zipcode?: Maybe<String>;
}

export interface UserProfileCreateOneInput {
  create?: Maybe<UserProfileCreateInput>;
  connect?: Maybe<UserProfileWhereUniqueInput>;
}

export interface UserCreaterolesInput {
  set?: Maybe<String[] | String>;
}

export interface UserProfileWhereInput {
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  department?: Maybe<String>;
  department_not?: Maybe<String>;
  department_in?: Maybe<String[] | String>;
  department_not_in?: Maybe<String[] | String>;
  department_lt?: Maybe<String>;
  department_lte?: Maybe<String>;
  department_gt?: Maybe<String>;
  department_gte?: Maybe<String>;
  department_contains?: Maybe<String>;
  department_not_contains?: Maybe<String>;
  department_starts_with?: Maybe<String>;
  department_not_starts_with?: Maybe<String>;
  department_ends_with?: Maybe<String>;
  department_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  phoneAlt?: Maybe<String>;
  phoneAlt_not?: Maybe<String>;
  phoneAlt_in?: Maybe<String[] | String>;
  phoneAlt_not_in?: Maybe<String[] | String>;
  phoneAlt_lt?: Maybe<String>;
  phoneAlt_lte?: Maybe<String>;
  phoneAlt_gt?: Maybe<String>;
  phoneAlt_gte?: Maybe<String>;
  phoneAlt_contains?: Maybe<String>;
  phoneAlt_not_contains?: Maybe<String>;
  phoneAlt_starts_with?: Maybe<String>;
  phoneAlt_not_starts_with?: Maybe<String>;
  phoneAlt_ends_with?: Maybe<String>;
  phoneAlt_not_ends_with?: Maybe<String>;
  street?: Maybe<String>;
  street_not?: Maybe<String>;
  street_in?: Maybe<String[] | String>;
  street_not_in?: Maybe<String[] | String>;
  street_lt?: Maybe<String>;
  street_lte?: Maybe<String>;
  street_gt?: Maybe<String>;
  street_gte?: Maybe<String>;
  street_contains?: Maybe<String>;
  street_not_contains?: Maybe<String>;
  street_starts_with?: Maybe<String>;
  street_not_starts_with?: Maybe<String>;
  street_ends_with?: Maybe<String>;
  street_not_ends_with?: Maybe<String>;
  streetExtra?: Maybe<String>;
  streetExtra_not?: Maybe<String>;
  streetExtra_in?: Maybe<String[] | String>;
  streetExtra_not_in?: Maybe<String[] | String>;
  streetExtra_lt?: Maybe<String>;
  streetExtra_lte?: Maybe<String>;
  streetExtra_gt?: Maybe<String>;
  streetExtra_gte?: Maybe<String>;
  streetExtra_contains?: Maybe<String>;
  streetExtra_not_contains?: Maybe<String>;
  streetExtra_starts_with?: Maybe<String>;
  streetExtra_not_starts_with?: Maybe<String>;
  streetExtra_ends_with?: Maybe<String>;
  streetExtra_not_ends_with?: Maybe<String>;
  zipcode?: Maybe<String>;
  zipcode_not?: Maybe<String>;
  zipcode_in?: Maybe<String[] | String>;
  zipcode_not_in?: Maybe<String[] | String>;
  zipcode_lt?: Maybe<String>;
  zipcode_lte?: Maybe<String>;
  zipcode_gt?: Maybe<String>;
  zipcode_gte?: Maybe<String>;
  zipcode_contains?: Maybe<String>;
  zipcode_not_contains?: Maybe<String>;
  zipcode_starts_with?: Maybe<String>;
  zipcode_not_starts_with?: Maybe<String>;
  zipcode_ends_with?: Maybe<String>;
  zipcode_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserProfileWhereInput[] | UserProfileWhereInput>;
  OR?: Maybe<UserProfileWhereInput[] | UserProfileWhereInput>;
  NOT?: Maybe<UserProfileWhereInput[] | UserProfileWhereInput>;
}

export interface UserUpdaterolesInput {
  set?: Maybe<String[] | String>;
}

export interface UserProfileUpdateInput {
  city?: Maybe<String>;
  country?: Maybe<String>;
  department?: Maybe<String>;
  email?: Maybe<String>;
  firstNames?: Maybe<UserProfileUpdatefirstNamesInput>;
  lastName?: Maybe<String>;
  phone?: Maybe<String>;
  phoneAlt?: Maybe<String>;
  street?: Maybe<String>;
  streetExtra?: Maybe<String>;
  zipcode?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserProfilePreviousValues {
  city?: String;
  country?: String;
  department?: String;
  email?: String;
  firstNames: String[];
  id: ID_Output;
  lastName: String;
  phone?: String;
  phoneAlt?: String;
  street?: String;
  streetExtra?: String;
  zipcode?: String;
}

export interface UserProfilePreviousValuesPromise
  extends Promise<UserProfilePreviousValues>,
    Fragmentable {
  city: () => Promise<String>;
  country: () => Promise<String>;
  department: () => Promise<String>;
  email: () => Promise<String>;
  firstNames: () => Promise<String[]>;
  id: () => Promise<ID_Output>;
  lastName: () => Promise<String>;
  phone: () => Promise<String>;
  phoneAlt: () => Promise<String>;
  street: () => Promise<String>;
  streetExtra: () => Promise<String>;
  zipcode: () => Promise<String>;
}

export interface UserProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<UserProfilePreviousValues>>,
    Fragmentable {
  city: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  department: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  firstNames: () => Promise<AsyncIterator<String[]>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  lastName: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  phoneAlt: () => Promise<AsyncIterator<String>>;
  street: () => Promise<AsyncIterator<String>>;
  streetExtra: () => Promise<AsyncIterator<String>>;
  zipcode: () => Promise<AsyncIterator<String>>;
}

export interface UserProfileSubscriptionPayload {
  mutation: MutationType;
  node: UserProfile;
  updatedFields: String[];
  previousValues: UserProfilePreviousValues;
}

export interface UserProfileSubscriptionPayloadPromise
  extends Promise<UserProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserProfilePreviousValuesPromise>() => T;
}

export interface UserProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserProfilePreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserProfile {
  city?: String;
  country?: String;
  department?: String;
  email?: String;
  firstNames: String[];
  id: ID_Output;
  lastName: String;
  phone?: String;
  phoneAlt?: String;
  street?: String;
  streetExtra?: String;
  zipcode?: String;
}

export interface UserProfilePromise extends Promise<UserProfile>, Fragmentable {
  city: () => Promise<String>;
  country: () => Promise<String>;
  department: () => Promise<String>;
  email: () => Promise<String>;
  firstNames: () => Promise<String[]>;
  id: () => Promise<ID_Output>;
  lastName: () => Promise<String>;
  phone: () => Promise<String>;
  phoneAlt: () => Promise<String>;
  street: () => Promise<String>;
  streetExtra: () => Promise<String>;
  zipcode: () => Promise<String>;
}

export interface UserProfileSubscription
  extends Promise<AsyncIterator<UserProfile>>,
    Fragmentable {
  city: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  department: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  firstNames: () => Promise<AsyncIterator<String[]>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  lastName: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  phoneAlt: () => Promise<AsyncIterator<String>>;
  street: () => Promise<AsyncIterator<String>>;
  streetExtra: () => Promise<AsyncIterator<String>>;
  zipcode: () => Promise<AsyncIterator<String>>;
}

export interface UserProfileNullablePromise
  extends Promise<UserProfile | null>,
    Fragmentable {
  city: () => Promise<String>;
  country: () => Promise<String>;
  department: () => Promise<String>;
  email: () => Promise<String>;
  firstNames: () => Promise<String[]>;
  id: () => Promise<ID_Output>;
  lastName: () => Promise<String>;
  phone: () => Promise<String>;
  phoneAlt: () => Promise<String>;
  street: () => Promise<String>;
  streetExtra: () => Promise<String>;
  zipcode: () => Promise<String>;
}

export interface UserProfileConnection {
  pageInfo: PageInfo;
  edges: UserProfileEdge[];
}

export interface UserProfileConnectionPromise
  extends Promise<UserProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserProfileEdge>>() => T;
  aggregate: <T = AggregateUserProfilePromise>() => T;
}

export interface UserProfileConnectionSubscription
  extends Promise<AsyncIterator<UserProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserProfileSubscription>() => T;
}

export interface UserPreviousValues {
  createdAt: DateTimeOutput;
  id: ID_Output;
  password: String;
  roles: String[];
  status: AuthStatus;
  updatedAt: DateTimeOutput;
  username: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  id: () => Promise<ID_Output>;
  password: () => Promise<String>;
  roles: () => Promise<String[]>;
  status: () => Promise<AuthStatus>;
  updatedAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  password: () => Promise<AsyncIterator<String>>;
  roles: () => Promise<AsyncIterator<String[]>>;
  status: () => Promise<AsyncIterator<AuthStatus>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserProfile {
  count: Int;
}

export interface AggregateUserProfilePromise
  extends Promise<AggregateUserProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserProfileSubscription
  extends Promise<AsyncIterator<AggregateUserProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  createdAt: DateTimeOutput;
  id: ID_Output;
  password: String;
  roles: String[];
  status: AuthStatus;
  updatedAt: DateTimeOutput;
  username: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  id: () => Promise<ID_Output>;
  password: () => Promise<String>;
  profile: <T = UserProfilePromise>() => T;
  roles: () => Promise<String[]>;
  status: () => Promise<AuthStatus>;
  updatedAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  password: () => Promise<AsyncIterator<String>>;
  profile: <T = UserProfileSubscription>() => T;
  roles: () => Promise<AsyncIterator<String[]>>;
  status: () => Promise<AsyncIterator<AuthStatus>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  id: () => Promise<ID_Output>;
  password: () => Promise<String>;
  profile: <T = UserProfilePromise>() => T;
  roles: () => Promise<String[]>;
  status: () => Promise<AuthStatus>;
  updatedAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
}

export interface UserProfileEdge {
  node: UserProfile;
  cursor: String;
}

export interface UserProfileEdgePromise
  extends Promise<UserProfileEdge>,
    Fragmentable {
  node: <T = UserProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserProfileEdgeSubscription
  extends Promise<AsyncIterator<UserProfileEdge>>,
    Fragmentable {
  node: <T = UserProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "AuthStatus",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserProfile",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
