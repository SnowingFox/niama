schema {
  query: query_root
  subscription: subscription_root
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

# columns and relationships of "post"
type post {
  content: String!
  id: uuid!
  title: String!
}

# Boolean expression to filter rows from the table "post". All fields are combined with a logical 'AND'.
input post_bool_exp {
  _and: [post_bool_exp]
  _not: post_bool_exp
  _or: [post_bool_exp]
  content: String_comparison_exp
  id: uuid_comparison_exp
  title: String_comparison_exp
}

# ordering options when selecting data from "post"
input post_order_by {
  content: order_by
  id: order_by
  title: order_by
}

# primary key columns input for table: "post"
input post_pk_columns_input {
  id: uuid!
}

# select columns of table "post"
enum post_select_column {
  # column name
  content

  # column name
  id

  # column name
  title
}

# query root
type query_root {
  # fetch data from the table: "post"
  post(
    # distinct select on columns
    distinct_on: [post_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [post_order_by!]

    # filter the rows returned
    where: post_bool_exp
  ): [post!]!

  # fetch data from the table: "post" using primary key columns
  post_by_pk(id: uuid!): post
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "post"
  post(
    # distinct select on columns
    distinct_on: [post_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [post_order_by!]

    # filter the rows returned
    where: post_bool_exp
  ): [post!]!

  # fetch data from the table: "post" using primary key columns
  post_by_pk(id: uuid!): post
}

scalar uuid

# expression to compare columns of type uuid. All fields are combined with logical 'AND'.
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

